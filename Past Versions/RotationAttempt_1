fn turn_face(before_turn: Vec<u8>) -> Vec<u8> {
    let after_turn: Vec<u8> = Vec::new();
    // Face rotation 
    let face_after = shift_face(before_turn[0..7]);
    // Edge rotation
    // shift_edges(); = Hardcoded function?
    let edge_after = shift_edges();

    after_turn.append(face_after);
    after_turn.append(edge_after);
}

fn shift_face(mut input: Vec<u8>) -> Vec<u8> {
    let cap = input.len() - 1;
    let save = input[cap];
    for x in 0..cap{
        let y: usize = cap-x;
        input[y] = input[(y+cap) % (cap+1)];
    }
    input[0] = save;
    return input;
}

fn main() {
    let cube: Vec<Vec<u8>> = vec![

        vec![0; 8], // Corners 
        vec![1; 8], // Direction of Facelet

        vec![2; 12], // Edges
        vec![3; 12]  // Direction of Facelet
    ];

    let x = find_face_corners(&cube, 1);
    println!("{:?}", x);

}
